"e","package Strategies
 abstract class CellSolutionStrategy {
    var numUses = 0
    var elapsedTime = 0

    fun execute(puzzle: Puzzle): Boolean {
        startTimer()
        val result = findApplicableCells(puzzle)
        val cells = result.first
        var changeMade = false
        val manipulationParam = result.second
        if (!cells.isEmpty()) {
            numUses ++
            changeMade = applyChanges(puzzle, cells, manipulationParam)
            // remember that some strategies might only eliminate possible values and not necessarily make a change to the puzzle
        }
        stopTimer()
        return changeMade
    }

    abstract fun findApplicableCells(puzzle: Puzzle) : Pair<List<Cell>, Any> // Pair lets you return 2 values and Any allows for a second return value of any type
    abstract fun applyChanges(puzzle: Puzzle, cells: List<Cell>, manipulationParam: Any): Boolean

    private fun startTimer() {
        // implementation here
    }

    private fun stopTimer() {
        // implementation here
    }

}","","0","1654833672545","CellSolutionStrategy.kt","1.1.3 for 2021-2022 @t1",
"e","import Puzzle","","20","1654833672552","CellSolutionStrategy.kt","1.1.3 for 2021-2022 @t1",
"e","import Cell","","18","1654833672566","CellSolutionStrategy.kt","1.1.3 for 2021-2022 @t1",
"e","

","","18","1654833672600","CellSolutionStrategy.kt","1.1.3 for 2021-2022 @t1",
"e",""," ","32","1654833672602","CellSolutionStrategy.kt","1.1.3 for 2021-2022 @t1",
"e","

","","45","1654833672603","CellSolutionStrategy.kt","1.1.3 for 2021-2022 @t1",
"e","package Strategies

class OnlyOnePlace {
}","","0","1654833693088","OnlyOnePlace.kt","1.1.3 for 2021-2022 @t1",
"e","package Strategies

class Twins {
}","","0","1654833789425","Twins.kt","1.1.3 for 2021-2022 @t1",
"e","package Strategies

class Guess {
}","","0","1654833797790","Guess.kt","1.1.3 for 2021-2022 @t1",
